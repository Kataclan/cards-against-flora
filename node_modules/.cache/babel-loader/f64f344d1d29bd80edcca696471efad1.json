{"ast":null,"code":"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport * as actions from './decks-actions'; // import { API_ROOT_URL } from '../../store/utils';\n\nimport { Actions as ActionTypes } from './decks-types'; // const DECKS_ENDPOINT = \n//   `${process.env.REACT_APP_API_ENDPOINT}/decks` ||\n//   `${API_ROOT_URL}/decks`;\n\nconst fakeDecks = [{\n  uid: '001',\n  displayName: 'Sample Deck 1',\n  rottenCards: [],\n  freshCards: []\n}, {\n  uid: '002',\n  displayName: 'Sample Deck 2',\n  rottenCards: [],\n  freshCards: []\n}, {\n  uid: '003',\n  displayName: 'Sample Deck 3',\n  rottenCards: [],\n  freshCards: []\n}, {\n  uid: '004',\n  displayName: 'Sample Deck 4',\n  rottenCards: [],\n  freshCards: []\n}];\n\nconst fakeFetch = () => new Promise(resolve => {\n  setTimeout(() => {\n    resolve({\n      decks: fakeDecks\n    });\n  }, 4000);\n});\n\nfunction* handleFetch() {\n  try {\n    const res = yield call(fakeFetch);\n\n    if (res.error) {\n      yield put(actions.fetchDecskError(res.error));\n    } else {\n      yield put(actions.fetchDecksSuccess(res.decks));\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      yield put(actions.fetchDecskError(err.stack));\n    } else {\n      yield put(actions.fetchDecskError('An unknown error occured.'));\n    }\n  }\n} // This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\n\n\nfunction* watchFetchRequest() {\n  yield takeEvery(ActionTypes.FETCH_DECKS_REQUEST, handleFetch);\n} // Export our root saga.\n// We can also use `fork()` here to split our saga into multiple watchers.\n\n\nexport function* DecksSaga() {\n  yield all([fork(watchFetchRequest)]);\n}","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/decks/decks-sagas.ts"],"names":["all","call","fork","put","takeEvery","actions","Actions","ActionTypes","fakeDecks","uid","displayName","rottenCards","freshCards","fakeFetch","Promise","resolve","setTimeout","decks","handleFetch","res","error","fetchDecskError","fetchDecksSuccess","err","Error","stack","watchFetchRequest","FETCH_DECKS_REQUEST","DecksSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,QAAgD,oBAAhD;AACA,OAAO,KAAKC,OAAZ,MAAyB,iBAAzB,C,CACA;;AACA,SAASC,OAAO,IAAIC,WAApB,QAAuC,eAAvC,C,CAEA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,CAChB;AAAEC,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,WAAW,EAAE,eAA3B;AAA4CC,EAAAA,WAAW,EAAE,EAAzD;AAA6DC,EAAAA,UAAU,EAAE;AAAzE,CADgB,EAEhB;AAAEH,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,WAAW,EAAE,eAA3B;AAA4CC,EAAAA,WAAW,EAAE,EAAzD;AAA6DC,EAAAA,UAAU,EAAE;AAAzE,CAFgB,EAGhB;AAAEH,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,WAAW,EAAE,eAA3B;AAA4CC,EAAAA,WAAW,EAAE,EAAzD;AAA6DC,EAAAA,UAAU,EAAE;AAAzE,CAHgB,EAIhB;AAAEH,EAAAA,GAAG,EAAE,KAAP;AAAcC,EAAAA,WAAW,EAAE,eAA3B;AAA4CC,EAAAA,WAAW,EAAE,EAAzD;AAA6DC,EAAAA,UAAU,EAAE;AAAzE,CAJgB,CAAlB;;AAOA,MAAMC,SAAS,GAAG,MAAmB,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC1DC,EAAAA,UAAU,CAAC,MAAM;AACfD,IAAAA,OAAO,CAAC;AACNE,MAAAA,KAAK,EAAET;AADD,KAAD,CAAP;AAGD,GAJS,EAIP,IAJO,CAAV;AAKD,CANkC,CAArC;;AAQA,UAAUU,WAAV,GAAwB;AACtB,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMlB,IAAI,CAACY,SAAD,CAAtB;;AAEA,QAAIM,GAAG,CAACC,KAAR,EAAe;AACb,YAAMjB,GAAG,CAACE,OAAO,CAACgB,eAAR,CAAwBF,GAAG,CAACC,KAA5B,CAAD,CAAT;AACD,KAFD,MAEO;AACL,YAAMjB,GAAG,CAACE,OAAO,CAACiB,iBAAR,CAA0BH,GAAG,CAACF,KAA9B,CAAD,CAAT;AACD;AACF,GARD,CAQE,OAAOM,GAAP,EAAY;AACZ,QAAIA,GAAG,YAAYC,KAAnB,EAA0B;AACxB,YAAMrB,GAAG,CAACE,OAAO,CAACgB,eAAR,CAAwBE,GAAG,CAACE,KAA5B,CAAD,CAAT;AACD,KAFD,MAEO;AACL,YAAMtB,GAAG,CAACE,OAAO,CAACgB,eAAR,CAAwB,2BAAxB,CAAD,CAAT;AACD;AACF;AACF,C,CAED;AACA;;;AACA,UAAUK,iBAAV,GAA8B;AAC5B,QAAMtB,SAAS,CAACG,WAAW,CAACoB,mBAAb,EAAkCT,WAAlC,CAAf;AACD,C,CAED;AACA;;;AACA,OAAO,UAAUU,SAAV,GAAsB;AAC3B,QAAM5B,GAAG,CAAC,CAACE,IAAI,CAACwB,iBAAD,CAAL,CAAD,CAAT;AACD","sourcesContent":["import { all, call, fork, put, takeEvery } from 'redux-saga/effects'\nimport * as actions from './decks-actions';\n// import { API_ROOT_URL } from '../../store/utils';\nimport { Actions as ActionTypes } from './decks-types';\n\n// const DECKS_ENDPOINT = \n//   `${process.env.REACT_APP_API_ENDPOINT}/decks` ||\n//   `${API_ROOT_URL}/decks`;\n\nconst fakeDecks = [\n  { uid: '001', displayName: 'Sample Deck 1', rottenCards: [], freshCards: []},\n  { uid: '002', displayName: 'Sample Deck 2', rottenCards: [], freshCards: []},\n  { uid: '003', displayName: 'Sample Deck 3', rottenCards: [], freshCards: []},\n  { uid: '004', displayName: 'Sample Deck 4', rottenCards: [], freshCards: []},\n];\n\nconst fakeFetch = ():Promise<any> => new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({\n        decks: fakeDecks,\n      });\n    }, 4000);\n  });\n\nfunction* handleFetch() {\n  try {\n    const res = yield call(fakeFetch);\n\n    if (res.error) {\n      yield put(actions.fetchDecskError(res.error))\n    } else {\n      yield put(actions.fetchDecksSuccess(res.decks))\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      yield put(actions.fetchDecskError(err.stack!))\n    } else {\n      yield put(actions.fetchDecskError('An unknown error occured.'))\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(ActionTypes.FETCH_DECKS_REQUEST, handleFetch);\n}\n\n// Export our root saga.\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* DecksSaga() {\n  yield all([fork(watchFetchRequest)])\n}"]},"metadata":{},"sourceType":"module"}