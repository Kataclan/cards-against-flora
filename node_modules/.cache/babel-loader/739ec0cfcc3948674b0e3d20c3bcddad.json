{"ast":null,"code":"export let CardTypes;\n\n(function (CardTypes) {\n  CardTypes[CardTypes[\"Fresh\"] = 0] = \"Fresh\";\n  CardTypes[CardTypes[\"Rotten\"] = 1] = \"Rotten\";\n})(CardTypes || (CardTypes = {}));\n\nexport let Actions;\n\n(function (Actions) {\n  Actions[\"FETCH_CARDS_REQUEST\"] = \"@@cards/FETCH_CARDS_REQUEST\";\n  Actions[\"FETCH_CARDS_SUCCESS\"] = \"@@cards/FETCH_CARDS_SUCCESS\";\n  Actions[\"FETCH_CARDS_ERROR\"] = \"@@cards/FETCH_CARDS_ERROR\";\n  Actions[\"SET_CARDS\"] = \"@@cards/SET_ROTTEN_CARDS\";\n})(Actions || (Actions = {}));","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/cards/cards-types.ts"],"names":["CardTypes","Actions"],"mappings":"AAEA,WAAYA,SAAZ;;WAAYA,S;AAAAA,EAAAA,S,CAAAA,S;AAAAA,EAAAA,S,CAAAA,S;GAAAA,S,KAAAA,S;;AAqBZ,WAAYC,OAAZ;;WAAYA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;AAAAA,EAAAA,O;GAAAA,O,KAAAA,O","sourcesContent":["import { Action } from \"typesafe-actions\";\n\nexport enum CardTypes {\n  Fresh,\n  Rotten\n}\n\nexport interface ICard {\n  uid: string;\n  type: CardTypes;\n}\n\ninterface IFreshCard extends ICard{\n  type: typeof CardTypes.Fresh;\n  fillingTxt: string;\n}\ninterface IRottenCard extends ICard{\n  type: typeof CardTypes.Rotten;\n  declarationTxt: string;\n}\n\nexport type Card = IFreshCard | IRottenCard;\n\nexport enum Actions {\n  FETCH_CARDS_REQUEST = '@@cards/FETCH_CARDS_REQUEST',\n  FETCH_CARDS_SUCCESS = '@@cards/FETCH_CARDS_SUCCESS',\n  FETCH_CARDS_ERROR = '@@cards/FETCH_CARDS_ERROR',\n  SET_CARDS = '@@cards/SET_ROTTEN_CARDS',\n}\n\nexport interface IActionFetchCardsRequest extends Action {\n  type: Actions.FETCH_CARDS_REQUEST;\n}\n\nexport interface IActionFetchCardsSuccess extends Action {\n  type: typeof Actions.FETCH_CARDS_SUCCESS;\n  payload: {\n    cards: Card[],\n  }\n}\n\nexport interface IActionFetchCardsError extends Action {\n  type: typeof Actions.FETCH_CARDS_ERROR;\n  payload: {\n    msg: string;\n  }\n}\n\nexport interface IActionSetCards extends Action {\n  type: typeof Actions.SET_CARDS;\n  payload: {\n    cards: Card[],\n  }\n}\n\nexport type ActionTypes =\n  IActionFetchCardsRequest |\n  IActionFetchCardsSuccess |\n  IActionFetchCardsError |\n  IActionSetCards;\n\nexport type State = {\n  isFetching: boolean,\n  cards: Card[],\n}"]},"metadata":{},"sourceType":"module"}