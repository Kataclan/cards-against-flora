{"ast":null,"code":"var _jsxFileName = \"/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/decks/components/DeckList.tsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as selectors from '../decks-selectors';\n\nconst mapStateToProps = state => ({\n  isLoading: state.decks.isFetching,\n  decks: selectors.getDecks(state)\n});\n\nconst dispatchProps = {};\n\nconst DeckList = ({\n  isLoading,\n  decks = []\n}) => {\n  if (isLoading) {\n    return React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, \"Loading decks...\");\n  }\n\n  if (decks.length === 0) {\n    return React.createElement(\"p\", {\n      style: {\n        textAlign: 'center'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, \"No decks yet, please create new...\");\n  }\n\n  return React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, decks.map(deck => React.createElement(\"li\", {\n    key: deck.uid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, deck.displayName)));\n};\n\nexport default connect(mapStateToProps, dispatchProps)(DeckList);","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/decks/components/DeckList.tsx"],"names":["React","connect","selectors","mapStateToProps","state","isLoading","decks","isFetching","getDecks","dispatchProps","DeckList","textAlign","length","map","deck","uid","displayName"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,oBAA3B;;AAEA,MAAMC,eAAe,GAAIC,KAAD,KAAuB;AAC7CC,EAAAA,SAAS,EAAED,KAAK,CAACE,KAAN,CAAYC,UADsB;AAE7CD,EAAAA,KAAK,EAAEJ,SAAS,CAACM,QAAV,CAAmBJ,KAAnB;AAFsC,CAAvB,CAAxB;;AAIA,MAAMK,aAAa,GAAG,EAAtB;;AAIA,MAAMC,QAAyB,GAAG,CAAC;AACjCL,EAAAA,SADiC;AAE1BC,EAAAA,KAAK,GAAG;AAFkB,CAAD,KAG5B;AACJ,MAAID,SAAJ,EAAe;AACb,WAAO;AAAG,MAAA,KAAK,EAAE;AAAEM,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAP;AACD;;AAED,MAAIL,KAAK,CAACM,MAAN,KAAiB,CAArB,EAAwB;AACtB,WACE;AAAG,MAAA,KAAK,EAAE;AAAED,QAAAA,SAAS,EAAE;AAAb,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CADF;AAKD;;AAED,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,KAAK,CAACO,GAAN,CAAUC,IAAI,IACb;AAAI,IAAA,GAAG,EAAEA,IAAI,CAACC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAACE,WADR,CADD,CADH,CADF;AASD,CAzBD;;AA2BA,eAAef,OAAO,CACpBE,eADoB,EAEpBM,aAFoB,CAAP,CAGbC,QAHa,CAAf","sourcesContent":["import { RootState } from '../../../store/types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport * as selectors from '../decks-selectors';\n\nconst mapStateToProps = (state: RootState) => ({\n  isLoading: state.decks.isFetching,\n  decks: selectors.getDecks(state),\n});\nconst dispatchProps = {};\n\ntype Props = ReturnType<typeof mapStateToProps> & typeof dispatchProps;\n\nconst DeckList: React.FC<Props> = ({\n  isLoading,\n  decks: decks = [],\n}) => {\n  if (isLoading) {\n    return <p style={{ textAlign: 'center' }}>Loading decks...</p>;\n  }\n\n  if (decks.length === 0) {\n    return (\n      <p style={{ textAlign: 'center' }}>\n        No decks yet, please create new...\n      </p>\n    );\n  }\n\n  return (\n    <ul>\n      {decks.map(deck => (\n        <li key={deck.uid}>\n          {deck.displayName}\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default connect(\n  mapStateToProps,\n  dispatchProps\n)(DeckList);\n"]},"metadata":{},"sourceType":"module"}