{"ast":null,"code":"import { call, put, all, take, fork } from 'redux-saga/effects';\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types';\n\nfunction* fetchInitialData() {\n  yield all([// throws fetching functions\n  put(decksActions.fetchDecksRequest()), put(cardsActions.fetchCardsRequest())]);\n}\n\nexport function* watchInitialData() {\n  yield all([take([DeckActions.FETCH_DECKS_SUCCESS, DeckActions.FETCH_DECKS_ERROR]), take([CardActions.FETCH_CARDS_SUCCESS, CardActions.FETCH_CARDS_ERROR])]);\n  console.log('HOLAA');\n}\nexport function* watchCards() {\n  yield all([// wait for all fetching to be finished and succedeed\n  take(CardActions.FETCH_CARDS_SUCCESS), take(CardActions.FETCH_CARDS_ERROR)]);\n  console.log('hola');\n} // Call init app on saga load\n\nexport function* AppSaga() {\n  yield call(fetchInitialData);\n  const watchers = [fork(watchDecks)];\n  yield all(watchers);\n  yield put(appActions.startInitApp());\n}","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/app/app-sagas.ts"],"names":["call","put","all","take","fork","appActions","decksActions","cardsActions","Actions","DeckActions","CardActions","fetchInitialData","fetchDecksRequest","fetchCardsRequest","watchInitialData","FETCH_DECKS_SUCCESS","FETCH_DECKS_ERROR","FETCH_CARDS_SUCCESS","FETCH_CARDS_ERROR","console","log","watchCards","AppSaga","watchers","watchDecks","startInitApp"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAO,KAAKC,UAAZ,MAA4B,oBAA5B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AAEA,SAASC,OAAO,IAAIC,WAApB,QAAuC,sBAAvC;AACA,SAASD,OAAO,IAAIE,WAApB,QAAuC,sBAAvC;;AAEA,UAAUC,gBAAV,GAA6B;AAC3B,QAAMT,GAAG,CAAC,CACR;AACAD,EAAAA,GAAG,CAACK,YAAY,CAACM,iBAAb,EAAD,CAFK,EAGRX,GAAG,CAACM,YAAY,CAACM,iBAAb,EAAD,CAHK,CAAD,CAAT;AAKD;;AAED,OAAO,UAAUC,gBAAV,GAA6B;AAClC,QAAMZ,GAAG,CAAC,CACRC,IAAI,CAAC,CAACM,WAAW,CAACM,mBAAb,EAAkCN,WAAW,CAACO,iBAA9C,CAAD,CADI,EAERb,IAAI,CAAC,CAACO,WAAW,CAACO,mBAAb,EAAkCP,WAAW,CAACQ,iBAA9C,CAAD,CAFI,CAAD,CAAT;AAIAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD;AAED,OAAO,UAAUC,UAAV,GAAuB;AAC5B,QAAMnB,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACO,WAAW,CAACO,mBAAb,CAFI,EAGRd,IAAI,CAACO,WAAW,CAACQ,iBAAb,CAHI,CAAD,CAAT;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD,C,CAED;;AACA,OAAO,UAAUE,OAAV,GAAoB;AACzB,QAAMtB,IAAI,CAACW,gBAAD,CAAV;AAEA,QAAMY,QAAQ,GAAG,CACfnB,IAAI,CAACoB,UAAD,CADW,CAAjB;AAIA,QAAMtB,GAAG,CAACqB,QAAD,CAAT;AACA,QAAMtB,GAAG,CAACI,UAAU,CAACoB,YAAX,EAAD,CAAT;AACD","sourcesContent":["import { call, put, all, take, fork } from 'redux-saga/effects';\n\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\n\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types';\n\nfunction* fetchInitialData() {\n  yield all([\n    // throws fetching functions\n    put(decksActions.fetchDecksRequest()),\n    put(cardsActions.fetchCardsRequest()),\n  ]);\n}\n\nexport function* watchInitialData() {\n  yield all([\n    take([DeckActions.FETCH_DECKS_SUCCESS, DeckActions.FETCH_DECKS_ERROR]),\n    take([CardActions.FETCH_CARDS_SUCCESS, CardActions.FETCH_CARDS_ERROR])\n  ]);\n  console.log('HOLAA');\n}\n\nexport function* watchCards() {\n  yield all([\n    // wait for all fetching to be finished and succedeed\n    take(CardActions.FETCH_CARDS_SUCCESS),\n    take(CardActions.FETCH_CARDS_ERROR)\n  ]);\n  console.log('hola')\n}\n\n// Call init app on saga load\nexport function* AppSaga() {\n  yield call(fetchInitialData);\n\n  const watchers = [\n    fork(watchDecks),\n  ];\n\n  yield all(watchers);\n  yield put(appActions.startInitApp());\n}"]},"metadata":{},"sourceType":"module"}