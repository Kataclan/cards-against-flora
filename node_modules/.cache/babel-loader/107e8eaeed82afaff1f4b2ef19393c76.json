{"ast":null,"code":"import { Actions } from \"./decks-types\";\nimport { combineReducers } from 'redux';\nimport { insertBaseObjInArray, removeBaseObjFromArray, updateBaseObjInArray } from '../../store/utils';\nexport const decks = (state = [], action) => {\n  switch (action.type) {\n    case Actions.ADD_DECK:\n      return insertBaseObjInArray(state, action.payload.deck);\n\n    case Actions.DELETE_DECK:\n      return removeBaseObjFromArray(state, action.payload.uid);\n\n    case Actions.FETCH_DECKS_SUCCESS:\n      return state.concat(action.payload.decks);\n\n    case Actions.UPDATE_DECK:\n      return updateBaseObjInArray(state, action.payload.deck);\n\n    default:\n      return state;\n  }\n};\nexport const isFetching = (state = false, action) => {\n  switch (action.type) {\n    case Actions.FETCH_DECKS_REQUEST:\n      return true;\n\n    case Actions.FETCH_DECKS_SUCCESS:\n      return false;\n\n    case Actions.FETCH_DECKS_ERROR:\n      return false;\n\n    default:\n      return state;\n  }\n};\nexport default combineReducers({\n  isFetching: isFetching,\n  decks: decks\n});","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/decks/decks-reducer.ts"],"names":["Actions","combineReducers","insertBaseObjInArray","removeBaseObjFromArray","updateBaseObjInArray","decks","state","action","type","ADD_DECK","payload","deck","DELETE_DECK","uid","FETCH_DECKS_SUCCESS","concat","UPDATE_DECK","isFetching","FETCH_DECKS_REQUEST","FETCH_DECKS_ERROR"],"mappings":"AAEA,SAAsBA,OAAtB,QAA2C,eAA3C;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,SAASC,oBAAT,EAA+BC,sBAA/B,EAAuDC,oBAAvD,QAAmF,mBAAnF;AAEA,OAAO,MAAMC,KAAkC,GAAG,CAChDC,KAAK,GAAG,EADwC,EAEhDC,MAFgD,KAG7C;AACH,UAAOA,MAAM,CAACC,IAAd;AACA,SAAKR,OAAO,CAACS,QAAb;AACC,aAAOP,oBAAoB,CAACI,KAAD,EAAQC,MAAM,CAACG,OAAP,CAAeC,IAAvB,CAA3B;;AACD,SAAKX,OAAO,CAACY,WAAb;AACC,aAAOT,sBAAsB,CAACG,KAAD,EAAQC,MAAM,CAACG,OAAP,CAAeG,GAAvB,CAA7B;;AACC,SAAKb,OAAO,CAACc,mBAAb;AACD,aAAOR,KAAK,CAACS,MAAN,CAAaR,MAAM,CAACG,OAAP,CAAeL,KAA5B,CAAP;;AACD,SAAKL,OAAO,CAACgB,WAAb;AACC,aAAOZ,oBAAoB,CAACE,KAAD,EAAQC,MAAM,CAACG,OAAP,CAAeC,IAAvB,CAA3B;;AACC;AAAS,aAAOL,KAAP;AATX;AAWD,CAfM;AAiBP,OAAO,MAAMW,UAAwC,GAAG,CACvDX,KAAK,GAAG,KAD+C,EAEvDC,MAFuD,KAGnD;AACJ,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKR,OAAO,CAACkB,mBAAb;AACE,aAAO,IAAP;;AACF,SAAKlB,OAAO,CAACc,mBAAb;AACD,aAAO,KAAP;;AACD,SAAKd,OAAO,CAACmB,iBAAb;AACC,aAAO,KAAP;;AACD;AACC,aAAOb,KAAP;AARF;AAUA,CAdM;AAgBP,eAAeL,eAAe,CAAC;AAC9BgB,EAAAA,UAAU,EAAEA,UADkB;AAE9BZ,EAAAA,KAAK,EAAEA;AAFuB,CAAD,CAA9B","sourcesContent":["\nimport { Reducer } from 'typesafe-actions';\nimport { ActionTypes, Actions, Deck } from \"./decks-types\";\nimport { combineReducers } from 'redux';\nimport { insertBaseObjInArray, removeBaseObjFromArray, updateBaseObjInArray } from '../../store/utils';\n\nexport const decks:Reducer<Deck[], ActionTypes> = (\n  state = [],\n  action: ActionTypes,\n) => {\n  switch(action.type){\n\t\tcase Actions.ADD_DECK:\n\t\t\treturn insertBaseObjInArray(state, action.payload.deck);\n\t\tcase Actions.DELETE_DECK:\n\t\t\treturn removeBaseObjFromArray(state, action.payload.uid);\n    case Actions.FETCH_DECKS_SUCCESS:\n\t\t\treturn state.concat(action.payload.decks);\n\t\tcase Actions.UPDATE_DECK:\n\t\t\treturn updateBaseObjInArray(state, action.payload.deck);\n    default: return state;\n  }\n};\n\nexport const isFetching:Reducer<boolean, ActionTypes> = (\n\tstate = false,\n\taction: ActionTypes,\n) => {\n\tswitch (action.type) {\n    case Actions.FETCH_DECKS_REQUEST:\n      return true;\n    case Actions.FETCH_DECKS_SUCCESS:\n\t\t\treturn false;\n\t\tcase Actions.FETCH_DECKS_ERROR:\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers({\n\tisFetching: isFetching,\n\tdecks: decks,\n});"]},"metadata":{},"sourceType":"module"}