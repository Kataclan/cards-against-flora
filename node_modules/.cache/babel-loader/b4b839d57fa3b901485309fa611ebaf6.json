{"ast":null,"code":"import { call, put, all, take } from 'redux-saga/effects';\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types'; // const fakeLoading = ():Promise<any> => new Promise((resolve) => {\n//   setTimeout(() => {\n//     resolve();\n//   }, 5000);\n// });\n\nfunction* initApp() {\n  yield put(appActions.startInitApp());\n  yield all([put(decksActions.fetchDecksRequest()), put(cardsActions.fetchCardsRequest())]);\n  yield take([DeckActions.FETCH_DECKS_SUCCESS, CardActions.FETCH_CARDS_SUCCESS]);\n  yield put(appActions.finishInitApp()); // yield put(appActions.finishInitApp());\n}\n\nexport function* AppSaga() {\n  yield call(initApp);\n}","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/app/app-sagas.ts"],"names":["call","put","all","take","appActions","decksActions","cardsActions","Actions","DeckActions","CardActions","initApp","startInitApp","fetchDecksRequest","fetchCardsRequest","FETCH_DECKS_SUCCESS","FETCH_CARDS_SUCCESS","finishInitApp","AppSaga"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,QAAqC,oBAArC;AAEA,OAAO,KAAKC,UAAZ,MAA4B,oBAA5B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AAEA,SAASC,OAAO,IAAIC,WAApB,QAAuC,sBAAvC;AACA,SAASD,OAAO,IAAIE,WAApB,QAAuC,sBAAvC,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,UAAUC,OAAV,GAAoB;AAClB,QAAMT,GAAG,CAACG,UAAU,CAACO,YAAX,EAAD,CAAT;AACA,QAAMT,GAAG,CAAC,CACRD,GAAG,CAACI,YAAY,CAACO,iBAAb,EAAD,CADK,EAERX,GAAG,CAACK,YAAY,CAACO,iBAAb,EAAD,CAFK,CAAD,CAAT;AAIA,QAAMV,IAAI,CAAC,CAACK,WAAW,CAACM,mBAAb,EAAkCL,WAAW,CAACM,mBAA9C,CAAD,CAAV;AACA,QAAMd,GAAG,CAACG,UAAU,CAACY,aAAX,EAAD,CAAT,CAPkB,CAQlB;AACD;;AAED,OAAO,UAAUC,OAAV,GAAoB;AACzB,QAAMjB,IAAI,CAACU,OAAD,CAAV;AACD","sourcesContent":["import { call, put, all, take } from 'redux-saga/effects';\n\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\n\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types';\n\n// const fakeLoading = ():Promise<any> => new Promise((resolve) => {\n//   setTimeout(() => {\n//     resolve();\n//   }, 5000);\n// });\n\nfunction* initApp() {\n  yield put(appActions.startInitApp());\n  yield all([\n    put(decksActions.fetchDecksRequest()),\n    put(cardsActions.fetchCardsRequest()),\n  ]);\n  yield take([DeckActions.FETCH_DECKS_SUCCESS, CardActions.FETCH_CARDS_SUCCESS]);\n  yield put(appActions.finishInitApp());\n  // yield put(appActions.finishInitApp());\n}\n\nexport function* AppSaga() {\n  yield call(initApp);\n}"]},"metadata":{},"sourceType":"module"}