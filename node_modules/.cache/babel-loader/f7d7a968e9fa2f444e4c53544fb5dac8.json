{"ast":null,"code":"import { Actions } from \"./decks-types\";\nimport { combineReducers } from 'redux';\nexport const decks = (state = [], action) => {\n  switch (action.type) {\n    case Actions.FETCH_DECKS_SUCCESS:\n      return state.concat(action.payload.decks);\n\n    default:\n      return state;\n  }\n};\nexport const isFetching = (state = true, action) => {\n  switch (action.type) {\n    case Actions.FETCH_DECKS_REQUEST:\n      return true;\n\n    case Actions.FETCH_DECKS_SUCCESS:\n      return false;\n\n    case Actions.FETCH_DECKS_ERROR:\n      return false;\n\n    default:\n      return state;\n  }\n};\nexport default combineReducers({\n  isFetching: isFetching,\n  decks: decks\n});","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/decks/decks-reducer.ts"],"names":["Actions","combineReducers","decks","state","action","type","FETCH_DECKS_SUCCESS","concat","payload","isFetching","FETCH_DECKS_REQUEST","FETCH_DECKS_ERROR"],"mappings":"AAEA,SAAsBA,OAAtB,QAA2C,eAA3C;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,OAAO,MAAMC,KAAkC,GAAG,CAChDC,KAAK,GAAG,EADwC,EAEhDC,MAFgD,KAG7C;AACH,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKL,OAAO,CAACM,mBAAb;AACE,aAAOH,KAAK,CAACI,MAAN,CAAaH,MAAM,CAACI,OAAP,CAAeN,KAA5B,CAAP;;AACF;AAAS,aAAOC,KAAP;AAHX;AAKD,CATM;AAWP,OAAO,MAAMM,UAAwC,GAAG,CACvDN,KAAK,GAAG,IAD+C,EAEvDC,MAFuD,KAGnD;AACJ,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKL,OAAO,CAACU,mBAAb;AACE,aAAO,IAAP;;AACF,SAAKV,OAAO,CAACM,mBAAb;AACD,aAAO,KAAP;;AACD,SAAKN,OAAO,CAACW,iBAAb;AACC,aAAO,KAAP;;AACD;AACC,aAAOR,KAAP;AARF;AAUA,CAdM;AAgBP,eAAeF,eAAe,CAAC;AAC9BQ,EAAAA,UAAU,EAAEA,UADkB;AAE9BP,EAAAA,KAAK,EAAEA;AAFuB,CAAD,CAA9B","sourcesContent":["\nimport { Reducer } from 'typesafe-actions';\nimport { ActionTypes, Actions, Deck } from \"./decks-types\";\nimport { combineReducers } from 'redux';\n\nexport const decks:Reducer<Deck[], ActionTypes> = (\n  state = [],\n  action: ActionTypes,\n) => {\n  switch(action.type){\n    case Actions.FETCH_DECKS_SUCCESS:\n      return state.concat(action.payload.decks);\n    default: return state;\n  }\n};\n\nexport const isFetching:Reducer<boolean, ActionTypes> = (\n\tstate = true,\n\taction: ActionTypes,\n) => {\n\tswitch (action.type) {\n    case Actions.FETCH_DECKS_REQUEST:\n      return true;\n    case Actions.FETCH_DECKS_SUCCESS:\n\t\t\treturn false;\n\t\tcase Actions.FETCH_DECKS_ERROR:\n\t\t\treturn false;\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport default combineReducers({\n\tisFetching: isFetching,\n\tdecks: decks,\n});"]},"metadata":{},"sourceType":"module"}