{"ast":null,"code":"import { call, put, all, take, fork } from 'redux-saga/effects';\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types';\n\nfunction* fetchInitialData() {\n  yield all([// throws fetching functions\n  put(decksActions.fetchDecksRequest()), put(cardsActions.fetchCardsRequest())]);\n}\n\nexport function* watchDecks() {\n  yield all([// wait for all fetching to be finished and succedeed\n  take(DeckActions.FETCH_DECKS_SUCCESS), take(DeckActions.FETCH_DECKS_ERROR)]);\n}\nexport function* watchCards() {\n  yield all([// wait for all fetching to be finished and succedeed\n  take(CardActions.FETCH_CARDS_SUCCESS), take(CardActions.FETCH_CARDS_ERROR)]);\n} // Call init app on saga load\n\nexport function* AppSaga() {\n  yield call(fetchInitialData);\n  yield all([fork(watchDecks), fork(watchCards)]);\n  yield put(appActions.startInitApp());\n}","map":{"version":3,"sources":["/Users/alexlauks/Documents/REPOS/cards-against-flora-tst/src/features/app/app-sagas.ts"],"names":["call","put","all","take","fork","appActions","decksActions","cardsActions","Actions","DeckActions","CardActions","fetchInitialData","fetchDecksRequest","fetchCardsRequest","watchDecks","FETCH_DECKS_SUCCESS","FETCH_DECKS_ERROR","watchCards","FETCH_CARDS_SUCCESS","FETCH_CARDS_ERROR","AppSaga","startInitApp"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,IAAzB,EAA+BC,IAA/B,QAA2C,oBAA3C;AAEA,OAAO,KAAKC,UAAZ,MAA4B,oBAA5B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AACA,OAAO,KAAKC,YAAZ,MAA8B,wBAA9B;AAEA,SAASC,OAAO,IAAIC,WAApB,QAAuC,sBAAvC;AACA,SAASD,OAAO,IAAIE,WAApB,QAAuC,sBAAvC;;AAEA,UAAUC,gBAAV,GAA6B;AAC3B,QAAMT,GAAG,CAAC,CACR;AACAD,EAAAA,GAAG,CAACK,YAAY,CAACM,iBAAb,EAAD,CAFK,EAGRX,GAAG,CAACM,YAAY,CAACM,iBAAb,EAAD,CAHK,CAAD,CAAT;AAKD;;AAED,OAAO,UAAUC,UAAV,GAAuB;AAC5B,QAAMZ,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACM,WAAW,CAACM,mBAAb,CAFI,EAGRZ,IAAI,CAACM,WAAW,CAACO,iBAAb,CAHI,CAAD,CAAT;AAKD;AAED,OAAO,UAAUC,UAAV,GAAuB;AAC5B,QAAMf,GAAG,CAAC,CACR;AACAC,EAAAA,IAAI,CAACO,WAAW,CAACQ,mBAAb,CAFI,EAGRf,IAAI,CAACO,WAAW,CAACS,iBAAb,CAHI,CAAD,CAAT;AAKD,C,CAED;;AACA,OAAO,UAAUC,OAAV,GAAoB;AACzB,QAAMpB,IAAI,CAACW,gBAAD,CAAV;AAEA,QAAMT,GAAG,CAAC,CACRE,IAAI,CAACU,UAAD,CADI,EAERV,IAAI,CAACa,UAAD,CAFI,CAAD,CAAT;AAKA,QAAMhB,GAAG,CAACI,UAAU,CAACgB,YAAX,EAAD,CAAT;AACD","sourcesContent":["import { call, put, all, take, fork } from 'redux-saga/effects';\n\nimport * as appActions from '../app/app-actions';\nimport * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\n\nimport { Actions as DeckActions } from '../decks/decks-types';\nimport { Actions as CardActions } from '../cards/cards-types';\n\nfunction* fetchInitialData() {\n  yield all([\n    // throws fetching functions\n    put(decksActions.fetchDecksRequest()),\n    put(cardsActions.fetchCardsRequest()),\n  ]);\n}\n\nexport function* watchDecks() {\n  yield all([\n    // wait for all fetching to be finished and succedeed\n    take(DeckActions.FETCH_DECKS_SUCCESS),\n    take(DeckActions.FETCH_DECKS_ERROR)\n  ]);\n}\n\nexport function* watchCards() {\n  yield all([\n    // wait for all fetching to be finished and succedeed\n    take(CardActions.FETCH_CARDS_SUCCESS),\n    take(CardActions.FETCH_CARDS_ERROR)\n  ]);\n}\n\n// Call init app on saga load\nexport function* AppSaga() {\n  yield call(fetchInitialData);\n\n  yield all([\n    fork(watchDecks),\n    fork(watchCards),\n  ]);\n\n  yield put(appActions.startInitApp());\n}"]},"metadata":{},"sourceType":"module"}