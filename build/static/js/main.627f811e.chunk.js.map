{"version":3,"sources":["assets/flower_loading.gif","serviceWorker.ts","mui-theme.ts","router/router-paths.ts","store/utils.ts","features/app/app-types.ts","features/app/app-actions.ts","features/cards/cards-types.ts","features/cards/cards-actions.ts","features/decks/decks-types.ts","features/app/app-sagas.ts","features/decks/decks-actions.ts","features/decks/decks-sagas.ts","features/cards/cards-sagas.ts","store/root-saga.ts","features/app/app-reducer.ts","features/decks/decks-reducer.ts","features/cards/cards-reducer.ts","store/root-reducer.ts","features/app/app-selectors.ts","components/FlexContainers.tsx","components/Spinner.tsx","assets/index.ts","components/LoadingFlower.tsx","pages/App.tsx","features/cards/cards-selectors.ts","components/ItemList.tsx","components/Typographies.tsx","components/EmptyPage.tsx","features/cards/components/CardListItem.tsx","components/AppFabs.tsx","features/cards/components/CardList.tsx","components/AppModal.tsx","features/cards/components/CardTypeSelector.tsx","features/cards/components/CardModal.tsx","components/ActionBar.tsx","components/AppTabs.tsx","components/AppBar.tsx","layouts/Main.tsx","pages/Cards.tsx","router/index.tsx","store/index.ts","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","secondary","text","typography","fontFamily","pathsMap","home","decks","cards","getPath","route","pathCb","params","composeEnhancers","compose","createMapFromArray","array","map","Map","forEach","item","set","uid","AppActions","AppTab","CardTypes","CardsActions","startInitApp","createAction","START_INIT_APP","finishInitApp","FINISH_INIT_APP","changeCurrentTab","CHANGE_CURRENT_TAB","DecksActions","addCard","ADD_CARD","deleteCard","DELETE_CARD","fetchCardsRequest","FETCH_CARDS_REQUEST","fetchCardsSuccess","FETCH_CARDS_SUCCESS","fetchCardsError","FETCH_CARDS_ERROR","selectCard","SELECT_CARD","updateCard","UPDATE_CARD","fetchInitialData","watchInitialData","AppSaga","put","cardsActions","take","appActions","call","push","ADD_DECK","DELETE_DECK","FETCH_DECKS_REQUEST","fetchDecksSuccess","FETCH_DECKS_SUCCESS","fetchDecksError","FETCH_DECKS_ERROR","UPDATE_DECK","handleFetch","watchFetchRequest","DecksSaga","fakeDecks","displayName","rottenCards","freshCards","fakeFetch","Promise","resolve","setTimeout","res","error","actions","Error","stack","takeEvery","ActionTypes","all","fork","watchCardModify","CardsSaga","cardsFake","dateAdded","Date","__type","Fresh","Rotten","toString","backToCards","history","replace","rootSaga","initialState","fromJS","isLoading","currentTab","Cards","isLoadingReducer","createReducer","handleType","state","currentTabReducer","action","payload","handlers","isFetching","isFetchingReducer","decksReducer","setIn","deck","get","update","remove","selectedCard","cardsReducer","merge","selectCardReducer","rootReducer","combineReducers","app","appReducer","router","connectRouter","getState","getIsLoadingApp","getCurrentTab","SpinnerSizes","FlexContainer","styledTS","styledComponents","div","props","vertical","flex","flexWrap","full","alignItems","justifyContent","alignSelf","overflow","FlexVContainer","FlexHContainer","FlexGrow","GIFFlowerLoading","FlowerLoading","Spinner","img","src","LoadingFLower","gifSize","MEDIUM","connect","isLoadingApp","appSelectors","getIsFetchingCards","getCards","getCard","cardId","getSelectedCardId","ItemList","this","items","itemRenderer","React","TypoAppTitle","styled","Typography","TypoCardContent","TypoModalTitle","EmptyPage","txt","align","variant","gutterBottom","Fabs","CardContainer","CardListItemStyled","styledMui","MuiCard","display","flexDirection","height","boxSizing","CardListItem","card","isSelected","onClickCard","cardColors","backGroundColor","textColor","onClick","style","border","backgroundColor","color","CardContent","selectors","selectedCardId","dispatch","count","sortBy","f","reverse","toIndexedSeq","toArray","index","key","ModalContainer","MuiModal","padding","CardTypeSelector","selectedValue","handleChange","FormControl","component","FormLabel","RadioGroup","aria-label","name","value","onChange","FormControlLabel","control","Radio","label","TextFieldContainer","TextField","width","onClickSave","cardType","cardTxt","uuid","v1","dateModified","onClickEdit","onClickClose","goBack","rest","useState","selectedCardType","setCardType","cardText","setCardsText","Modal","aria-labelledby","aria-describedby","open","BackdropComponent","Backdrop","BackdropProps","timeout","onBackdropClick","Fade","in","e","target","id","multiline","inputProps","rowsMax","Button","FabWithMargin","Fab","marginRight","FabAdd","FabEdit","FabDelete","StyledActionBar","MuiAppBar","position","ActionButtonsContainer","zIndex","top","left","right","margin","onClickAdd","onClickDelete","Toolbar","AppTabs","onChangeTab","Tabs","valueOf","v","indicatorColor","Tab","disabled","AppBarStyled","paddingTop","tab","Main","children","isFetchingCards","cardsSelectors","LoadingFlower","path","url","CardModal","createBrowserHistory","store","loggerMiddleWare","createLogger","collapsed","sagaMiddleware","createSagaMiddleWare","middlewares","routerMiddleware","enhancer","applyMiddleware","createStore","run","configureStore","AppRouter","exact","App","Component","ReactDOM","render","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.627f811e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flower_loading.236f6257.gif\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core';\n\nexport default createMuiTheme({\n  palette: {\n    primary: { main: '#8bc34a' },\n    secondary: { main: '#8d6e63' },\n    text: {\n      primary: '#FFFFFF',\n    },\n  },\n  typography: {\n    fontFamily: 'Tomorrow',\n  },\n});\n","const pathsMap = {\n  home: () => '/',\n  decks: () => '/decks',\n  cards: () => '/cards',\n};\n\ntype PathsMap = typeof pathsMap;\n\nexport const getPath = <TRoute extends keyof PathsMap>(route: TRoute, ...params: Parameters<PathsMap[TRoute]>) => {\n  const pathCb: (...args: any[]) => string = pathsMap[route];\n\n  return pathCb(...params);\n};\n","import { compose } from 'redux';\nimport { Map } from 'immutable';\n\nexport const composeEnhancers =\n  (process.env.NODE_ENV === 'development' && window && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const API_ROOT_URL = 'http://localhost:3000';\n\nexport function createMapFromArray<T extends BaseObj>(array: T[]) {\n  let map = Map<string, T>();\n  array.forEach(item => (map = map.set(item.uid, item)));\n  return map;\n}\n","import { Action } from 'typesafe-actions';\nimport { Record } from 'immutable';\n\nexport enum AppActions {\n  START_INIT_APP = '@@app/START_INIT_APP',\n  FINISH_INIT_APP = '@@app/FINISH_INIT_APP',\n  CHANGE_CURRENT_TAB = '@@app/CHANGE_CURRENT_TAB',\n}\n\nexport interface ActionStartInitApp extends Action {\n  type: AppActions.START_INIT_APP;\n}\n\nexport interface ActionFinishInitApp extends Action {\n  type: AppActions.FINISH_INIT_APP;\n}\n\nexport interface ActionChangeCurrentTab extends Action {\n  type: AppActions.CHANGE_CURRENT_TAB;\n  payload: AppTab;\n}\n\nexport type AppActionTypes = ActionStartInitApp | ActionFinishInitApp | ActionChangeCurrentTab;\n\nexport enum AppTab {\n  Cards = 0,\n  Decks,\n}\n\nexport type AppState = Record<{\n  isLoading: boolean;\n  currentTab: AppTab;\n}>;\n","import { createAction } from 'typesafe-actions';\nimport { AppActions, AppTab } from './app-types';\n\nexport const startInitApp = createAction(AppActions.START_INIT_APP)<void>();\n\nexport const finishInitApp = createAction(AppActions.FINISH_INIT_APP)<void>();\n\nexport const changeCurrentTab = createAction(AppActions.CHANGE_CURRENT_TAB)<AppTab>();\n","import { Map, Record } from 'immutable';\nimport { Action } from 'typesafe-actions';\n\nexport enum CardTypes {\n  Fresh = 'Fresh',\n  Rotten = 'Rotten',\n}\n\nexport interface FreshCard extends BaseObj {\n  __type: CardTypes.Fresh;\n}\n\nexport interface RottenCard extends BaseObj {\n  __type: CardTypes.Rotten;\n}\n\nexport type Card = (FreshCard | RottenCard) & {\n  text: string;\n};\n\nexport enum CardsActions {\n  ADD_CARD = '@@cards/ADD_CARD',\n  DELETE_CARD = '@@cards/DELETE_CARD',\n  FETCH_CARDS_REQUEST = '@@cards/FETCH_CARDS_REQUEST',\n  FETCH_CARDS_SUCCESS = '@@cards/FETCH_CARDS_SUCCESS',\n  FETCH_CARDS_ERROR = '@@cards/FETCH_CARDS_ERROR',\n  SELECT_CARD = '@@cards/SELECT_CARD',\n  UPDATE_CARD = '@@cards/UPDATE_CARD',\n}\n\nexport interface ActionAddCard extends Action {\n  type: typeof CardsActions.ADD_CARD;\n  payload: Card;\n}\n\nexport interface ActionDeleteCard {\n  type: typeof CardsActions.DELETE_CARD;\n  payload: string;\n}\n\nexport interface ActionFetchCardsRequest {\n  type: typeof CardsActions.FETCH_CARDS_REQUEST;\n}\n\nexport interface ActionFetchCardsSuccess {\n  type: typeof CardsActions.FETCH_CARDS_SUCCESS;\n  payload: Card[];\n}\n\nexport interface ActionFetchCardsError {\n  type: typeof CardsActions.FETCH_CARDS_ERROR;\n  payload: string;\n}\n\nexport interface ActionSelectCard {\n  type: typeof CardsActions.SELECT_CARD;\n  payload: string;\n}\n\nexport interface ActionUpdateCard {\n  type: typeof CardsActions.UPDATE_CARD;\n  payload: Card;\n}\n\nexport type CardsActionTypes =\n  | ActionAddCard\n  | ActionDeleteCard\n  | ActionFetchCardsRequest\n  | ActionFetchCardsSuccess\n  | ActionFetchCardsError\n  | ActionSelectCard\n  | ActionUpdateCard;\n\nexport type CardsState = Record<{\n  isFetching: boolean;\n  cards: Map<string, Card>;\n  selectedCard: string;\n}>;\n","import { createAction } from 'typesafe-actions';\nimport { CardsActions, Card } from './cards-types';\n\nexport const addCard = createAction(CardsActions.ADD_CARD)<Card>();\n\nexport const deleteCard = createAction(CardsActions.DELETE_CARD)<string>();\n\nexport const fetchCardsRequest = createAction(CardsActions.FETCH_CARDS_REQUEST)<void>();\n\nexport const fetchCardsSuccess = createAction(CardsActions.FETCH_CARDS_SUCCESS)<Card[]>();\n\nexport const fetchCardsError = createAction(CardsActions.FETCH_CARDS_ERROR)<string>();\n\nexport const selectCard = createAction(CardsActions.SELECT_CARD)<string>();\n\nexport const updateCard = createAction(CardsActions.UPDATE_CARD)<Card>();\n","import { Action } from 'typesafe-actions';\nimport { Map, Record } from 'immutable';\n\nexport interface Deck extends BaseObj {\n  displayName: string;\n  rottenCards: string[];\n  freshCards: string[];\n}\n\nexport enum DecksActions {\n  ADD_DECK = '@@decks/ADD_DECK',\n  DELETE_DECK = '@@decks/DELETE_DECK',\n  FETCH_DECKS_REQUEST = '@@decks/FETCH_DECKS_REQUEST',\n  FETCH_DECKS_SUCCESS = '@@decks/FETCH_DECKS_SUCCESS',\n  FETCH_DECKS_ERROR = '@@decks/FETCH_DECKS_ERROR',\n  UPDATE_DECK = '@@decks/UPDATE_DECK',\n}\n\nexport interface ActionAddDeck extends Action {\n  type: DecksActions.ADD_DECK;\n  payload: {\n    deck: Deck;\n  };\n}\n\nexport interface ActionDeleteDeck extends Action {\n  type: DecksActions.DELETE_DECK;\n  payload: {\n    uid: string;\n  };\n}\n\nexport interface ActionFetchDecksRequest extends Action {\n  type: DecksActions.FETCH_DECKS_REQUEST;\n}\n\nexport interface ActionFetchDecksSuccess extends Action {\n  type: typeof DecksActions.FETCH_DECKS_SUCCESS;\n  payload: {\n    decks: Deck[];\n  };\n}\n\nexport interface ActionFetchDecksError extends Action {\n  type: typeof DecksActions.FETCH_DECKS_ERROR;\n  payload: {\n    msg: string;\n  };\n}\n\nexport interface ActionUpdateDeck extends Action {\n  type: DecksActions.UPDATE_DECK;\n  payload: {\n    deck: Deck;\n  };\n}\n\nexport type DecksActionTypes =\n  | ActionAddDeck\n  | ActionDeleteDeck\n  | ActionFetchDecksRequest\n  | ActionFetchDecksSuccess\n  | ActionFetchDecksError\n  | ActionUpdateDeck;\n\nexport type DecksState = Record<{\n  isFetching: boolean;\n  decks: Map<string, Deck>;\n}>;\n","import { call, put, take, takeEvery } from 'redux-saga/effects';\nimport { push } from 'connected-react-router/immutable';\n\nimport * as appActions from '../app/app-actions';\n// import * as decksActions from '../decks/decks-actions';\nimport * as cardsActions from '../cards/cards-actions';\n\n// import { DecksActions as DeckActions } from '../decks/decks-types';\nimport { CardsActions } from '../cards/cards-types';\nimport { AppActions, ActionChangeCurrentTab } from './app-types';\n\n// Trigger fetching data actions\nfunction* fetchInitialData() {\n  yield put(cardsActions.fetchCardsRequest());\n}\n\n// Wait until all fetching data actions are completed (including errors)\nexport function* watchInitialData() {\n  yield take([CardsActions.FETCH_CARDS_SUCCESS, CardsActions.FETCH_CARDS_ERROR]);\n}\n\nexport function* changeCurrentTab(action: ActionChangeCurrentTab) {\n  yield put(appActions.changeCurrentTab(action.payload));\n}\n\n// Change tab listener\nexport function* watchChangeTab() {\n  yield takeEvery(AppActions.CHANGE_CURRENT_TAB, changeCurrentTab);\n}\n\n// Call init app on saga load\nexport function* AppSaga() {\n  yield put(appActions.startInitApp());\n  yield call(fetchInitialData);\n  yield call(watchInitialData);\n  yield put(appActions.finishInitApp());\n  yield put(push('/cards'));\n}\n","import { createAction } from 'typesafe-actions';\nimport { DecksActions, Deck } from './decks-types';\n\nexport const addDeck = createAction(DecksActions.ADD_DECK)<Deck>();\n\nexport const deleteDeck = createAction(DecksActions.DELETE_DECK)<string>();\n\nexport const fetchDecksRequest = createAction(DecksActions.FETCH_DECKS_REQUEST)<void>();\n\nexport const fetchDecksSuccess = createAction(DecksActions.FETCH_DECKS_SUCCESS)<Deck[]>();\n\nexport const fetchDecksError = createAction(DecksActions.FETCH_DECKS_ERROR)<string>();\n\nexport const updateDeck = createAction(DecksActions.UPDATE_DECK)<Deck>();\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport * as actions from './decks-actions';\n// import { API_ROOT_URL } from '../../store/utils';\nimport { DecksActions as ActionTypes } from './decks-types';\n\n// const DECKS_ENDPOINT =\n//   `${process.env.REACT_APP_API_ENDPOINT}/decks` ||\n//   `${API_ROOT_URL}/decks`;\n\nconst fakeDecks = [\n  { uid: '001', displayName: 'Sample Deck 1', rottenCards: [], freshCards: [] },\n  { uid: '002', displayName: 'Sample Deck 2', rottenCards: [], freshCards: [] },\n  { uid: '003', displayName: 'Sample Deck 3', rottenCards: [], freshCards: [] },\n  { uid: '004', displayName: 'Sample Deck 4', rottenCards: [], freshCards: [] },\n];\n\nconst fakeFetch = (): Promise<any> =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        decks: fakeDecks,\n      });\n    }, 1000);\n  });\n\nfunction* handleFetch() {\n  try {\n    const res = yield call(fakeFetch);\n\n    if (res.error) {\n      yield put(actions.fetchDecksError(res.error));\n    } else {\n      yield put(actions.fetchDecksSuccess(res.decks));\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      yield put(actions.fetchDecksError(err.stack!));\n    } else {\n      yield put(actions.fetchDecksError('An unknown error occured.'));\n    }\n  }\n}\n\n// This is our watcher function. We use `take*()` functions to watch Redux for a specific action\n// type, and run our saga, for example the `handleFetch()` saga above.\nfunction* watchFetchRequest() {\n  yield takeEvery(ActionTypes.FETCH_DECKS_REQUEST, handleFetch);\n}\n\n// Export our root saga.\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* DecksSaga() {\n  yield all([fork(watchFetchRequest)]);\n}\n","import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\nimport * as actions from './cards-actions';\nimport { CardsActions, Card, CardTypes } from './cards-types';\nimport { history } from '../../router';\n\nconst cardsFake: Card[] = [\n  {\n    dateAdded: new Date(),\n    uid: '1',\n    __type: CardTypes.Fresh,\n    text:\n      'Lorem fistrum ese que llega diodenoo ahorarr ese hombree fistro papaar papaar. Al ataquerl no puedor ese que llega amatomaa al ataquerl amatomaa.',\n  },\n  {\n    dateAdded: new Date(),\n    uid: '2',\n    __type: CardTypes.Fresh,\n    text:\n      'Benemeritaar va usté muy cargadoo ese que llega ahorarr. Está la cosa muy malar mamaar de la pradera a gramenawer va usté muy cargadoo apetecan sexuarl. La caidita benemeritaar a gramenawer ahorarr está la cosa muy malar quietooor fistro ese que llega pecador apetecan. Ahorarr condemor ese pedazo de ese que llega no te digo trigo por no llamarte Rodrigor llevame al sircoo mamaar.',\n  },\n  {\n    dateAdded: new Date(),\n    uid: '3',\n    __type: CardTypes.Fresh,\n    text:\n      'La caidita benemeritaar a gramenawer ahorarr está la cosa muy malar quietooor fistro ese que llega pecador apetecan',\n  },\n  {\n    dateAdded: new Date(),\n    uid: '4',\n    __type: CardTypes.Fresh,\n    text:\n      'Ese hombree me cago en tus muelas apetecan torpedo a wan pecador. Me cago en tus muelas a wan va usté muy cargadoo caballo blanco caballo negroorl al ataquerl hasta luego Lucas mamaar no te digo trigo por no llamarte',\n  },\n  {\n    dateAdded: new Date(),\n    uid: '5',\n    __type: CardTypes.Fresh,\n    text:\n      'Diodenoo jarl se calle ustée no puedor jarl tiene musho peligro a gramenawer diodenoo. Amatomaa te va a hasé pupitaa jarl por la gloria de mi madre ese que llega a wan.',\n  },\n  { dateAdded: new Date(), uid: '10', __type: CardTypes.Rotten, text: 'Al ataquerl ___' },\n  { dateAdded: new Date(), uid: '11', __type: CardTypes.Rotten, text: 'No puedor ____' },\n];\n\nconst fakeFetch = (): Promise<any> =>\n  new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        cards: cardsFake,\n      });\n    }, 2000);\n  });\n\nfunction* handleFetch() {\n  try {\n    const res: any = yield call(fakeFetch);\n\n    if (res.error) {\n      yield put(actions.fetchCardsError(res.error));\n    } else {\n      yield put(actions.fetchCardsSuccess(res.cards));\n    }\n  } catch (err) {\n    if (err instanceof Error) {\n      yield put(actions.fetchCardsError((err.stack as string).toString()));\n    } else {\n      yield put(actions.fetchCardsError('An unknown error occured.'));\n    }\n  }\n}\n\n// Change tab listener\nfunction backToCards() {\n  history.replace('/cards');\n}\n\nfunction* watchCardModify() {\n  yield all([takeEvery(CardsActions.ADD_CARD, backToCards), takeEvery(CardsActions.UPDATE_CARD, backToCards)]);\n}\n\nfunction* watchFetchRequest() {\n  yield takeEvery(CardsActions.FETCH_CARDS_REQUEST, handleFetch);\n}\n\n// Export our root saga.\n// We can also use `fork()` here to split our saga into multiple watchers.\nexport function* CardsSaga() {\n  yield all([fork(watchFetchRequest), fork(watchCardModify)]);\n}\n","import { all, fork } from 'redux-saga/effects';\nimport { AppSaga } from '../features/app/app-sagas';\nimport { DecksSaga } from '../features/decks/decks-sagas';\nimport { CardsSaga } from '../features/cards/cards-sagas';\n\nexport default function* rootSaga() {\n  yield all([fork(AppSaga), fork(DecksSaga), fork(CardsSaga)]);\n}\n","import { AppActions, AppActionTypes, AppState, AppTab } from './app-types';\nimport { createReducer } from 'typesafe-actions';\nimport { fromJS } from 'immutable';\n\nconst initialState: AppState = fromJS({\n  isLoading: false,\n  currentTab: AppTab.Cards,\n});\n\nconst isLoadingReducer = createReducer<AppState, AppActionTypes>(initialState)\n  .handleType(AppActions.START_INIT_APP, state => state.set('isLoading', true))\n  .handleType(AppActions.FINISH_INIT_APP, state => state.set('isLoading', false));\n\nconst currentTabReducer = createReducer<AppState, AppActionTypes>(\n  initialState,\n).handleType(AppActions.CHANGE_CURRENT_TAB, (state, action) => state.set('currentTab', action.payload));\n\nexport default createReducer<AppState, AppActionTypes>(initialState, {\n  ...isLoadingReducer.handlers,\n  ...currentTabReducer.handlers,\n});\n","import { DecksActionTypes, DecksActions, DecksState } from './decks-types';\nimport { Map, fromJS } from 'immutable';\nimport { createReducer } from 'typesafe-actions';\n\nconst initialState: DecksState = fromJS({\n  isFetching: false,\n  decks: Map(),\n});\n\nconst isFetchingReducer = createReducer<DecksState, DecksActionTypes>(initialState)\n  .handleType(DecksActions.FETCH_DECKS_REQUEST, state => state.set('isFetching', true))\n  .handleType([DecksActions.FETCH_DECKS_SUCCESS, DecksActions.FETCH_DECKS_ERROR], state =>\n    state.set('isFetching', true),\n  );\n\nconst decksReducer = createReducer<DecksState, DecksActionTypes>(initialState)\n  .handleType(DecksActions.FETCH_DECKS_REQUEST, state => state.set('isFetching', true))\n  .handleType(DecksActions.FETCH_DECKS_SUCCESS, (state, action) =>\n    state.setIn(\n      'decks',\n      action.payload.decks.forEach(deck => state.get('decks').set(deck.uid, deck)),\n    ),\n  )\n  .handleType([DecksActions.ADD_DECK, DecksActions.UPDATE_DECK], (state, action) =>\n    state.setIn(\n      'decks',\n      state.get('decks').update(action.payload.deck.uid, () => action.payload.deck),\n    ),\n  )\n  .handleType(DecksActions.DELETE_DECK, (state, action) =>\n    state.setIn('decks', state.get('decks').remove(action.payload.uid)),\n  );\n\nexport default createReducer<DecksState, DecksActionTypes>(initialState, {\n  ...isFetchingReducer.handlers,\n  ...decksReducer.handlers,\n});\n","import { CardsActionTypes, CardsActions, CardsState, Card } from './cards-types';\nimport { Map, fromJS } from 'immutable';\nimport { createReducer } from 'typesafe-actions';\nimport { createMapFromArray } from '../../store/utils';\n\nconst initialState: CardsState = fromJS({\n  isFetching: false,\n  cards: Map<string, Card>(),\n  selectedCard: '',\n});\n\nconst isFetchingReducer = createReducer<CardsState, CardsActionTypes>(initialState)\n  .handleType(CardsActions.FETCH_CARDS_REQUEST, state => state.set('isFetching', true))\n  .handleType(CardsActions.FETCH_CARDS_ERROR, state => state.set('isFetching', false));\n\nconst cardsReducer = createReducer<CardsState, CardsActionTypes>(initialState)\n  .handleType(CardsActions.FETCH_CARDS_SUCCESS, (state, action) =>\n    state.merge({\n      isFetching: false,\n      cards: createMapFromArray(action.payload),\n    }),\n  )\n  .handleType(CardsActions.ADD_CARD, (state, action) =>\n    state.setIn(\n      ['cards'],\n      state.get('cards').update(action.payload.uid, () => action.payload),\n    ),\n  )\n  .handleType(CardsActions.UPDATE_CARD, (state, action) =>\n    state.merge({\n      selectedCard: '',\n      cards: state.get('cards').update(action.payload.uid, () => action.payload),\n    }),\n  )\n  .handleType(CardsActions.DELETE_CARD, (state, action) =>\n    state.merge({\n      selectedCard: '',\n      cards: state.get('cards').remove(action.payload),\n    }),\n  );\n\nconst selectCardReducer = createReducer<CardsState, CardsActionTypes>(initialState).handleType(\n  CardsActions.SELECT_CARD,\n  (state, action) => state.set('selectedCard', action.payload === state.get('selectedCard') ? '' : action.payload),\n);\n\nexport default createReducer<CardsState, CardsActionTypes>(initialState, {\n  ...isFetchingReducer.handlers,\n  ...cardsReducer.handlers,\n  ...selectCardReducer.handlers,\n});\n","import { History } from 'history';\nimport { combineReducers } from 'redux-immutable';\nimport { connectRouter } from 'connected-react-router';\n\nimport appReducer from '../features/app/app-reducer';\nimport decksReducer from '../features/decks/decks-reducer';\nimport cardsReducer from '../features/cards/cards-reducer';\n\nconst rootReducer = (history: History<any>) =>\n  combineReducers({\n    app: appReducer,\n    decks: decksReducer,\n    cards: cardsReducer,\n    router: connectRouter(history),\n  });\n\nexport default rootReducer;\n","import { State } from '../../store/types';\n\nexport const getState = (state: State) => state.get('app');\n\nexport const getIsLoadingApp = (state: State) => getState(state).get('isLoading');\n\nexport const getCurrentTab = (state: State) => getState(state).get('currentTab');\n","import React from 'react';\nimport styledComponents from 'styled-components';\nimport styledTS from 'styled-components-ts';\n\ntype FlexContainerProps = React.CSSProperties & {\n  full?: boolean;\n  flex?: string;\n  vertical?: boolean;\n  alignItems?: string;\n  justifyContent?: string;\n  alignSelf?: string;\n  flexWrap?: string;\n  overflow?: string;\n};\n\nexport const FlexContainer = styledTS<FlexContainerProps>(styledComponents.div)`\n    display: flex;\n    flex-direction: ${props => (props.vertical ? 'column' : 'row')};\n    ${props => (props.flex ? `flex: ${props.flex}` : '')};\n    ${props => (props.flexWrap ? `flex-wrap: ${props.flexWrap}` : '')};\n    ${props => (props.full ? 'width:100%;height:100%;' : '')};\n    ${props => (props.alignItems ? `align-items: ${props.alignItems}` : '')};\n    ${props => (props.justifyContent ? `justify-content: ${props.justifyContent}` : '')};\n    ${props => (props.alignSelf ? `align-self: ${props.alignSelf}` : '')};\n    ${props => (props.overflow ? `overflow: ${props.overflow}` : '')};\n`;\n\nexport const FlexVContainer: React.FC<FlexContainerProps> = props => <FlexContainer {...props} vertical={true} />;\n\nexport const FlexHContainer: React.FC<FlexContainerProps> = props => <FlexContainer {...props} vertical={false} />;\n\nexport const FlexGrow = styledTS(styledComponents.div)`\n  flex-grow: 1;\n`;\n","import styledComponents from 'styled-components';\nimport styledTS from 'styled-components-ts';\nimport { GIFFlowerLoading } from '../assets';\n\nexport type SpinnerSrcs = typeof GIFFlowerLoading;\n\nexport enum SpinnerSizes {\n  SMALL = 'SMALL',\n  MEDIUM = 'MEDIUM',\n  BIG = 'BIG',\n}\n\nexport type SpinnerProps = {\n  gifSize?: SpinnerSizes;\n  src?: SpinnerSrcs;\n};\n\nconst Spinner = styledTS<SpinnerProps>(styledComponents.img)`\n  url: ${props => `(${props.src})`};\n`;\n\nexport default Spinner;\n","import FlowerLoading from './flower_loading.gif';\n\n// GIFS\nexport const GIFFlowerLoading = FlowerLoading;\n","import React from 'react';\nimport { FlexVContainer } from './FlexContainers';\n\nimport { GIFFlowerLoading } from '../assets';\nimport Spinner, { SpinnerSizes } from './Spinner';\n\ntype Props = {\n  full?: boolean;\n};\n\nconst LoadingFLower: React.FC<Props> = ({ full }) => (\n  <FlexVContainer full={full ? full : false}>\n    <Spinner src={GIFFlowerLoading} gifSize={SpinnerSizes.MEDIUM} />\n  </FlexVContainer>\n);\n\nexport default LoadingFLower;\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { State } from '../store/types';\nimport * as appSelectors from '../features/app/app-selectors';\n\nimport LoadingFLower from '../components/LoadingFlower';\n\nconst mapStateToProps = (state: State) => ({\n  isLoadingApp: appSelectors.getIsLoadingApp(state),\n});\n\ntype Props = ReturnType<typeof mapStateToProps>;\n\nconst AppPage: React.FC<Props> = ({ isLoadingApp }) => (isLoadingApp ? <LoadingFLower full={true} /> : null);\n\nexport default connect(mapStateToProps)(AppPage);\n","import { State } from '../../store/types';\n\nexport const getState = (state: State) => state.get('cards');\n\nexport const getIsFetchingCards = (state: State) => getState(state).get('isFetching');\n\nexport const getCards = (state: State) => getState(state).get('cards');\n\nexport const getCard = (state: State, cardId: string) => getCards(state).get(cardId);\n\nexport const getSelectedCardId = (state: State) => getState(state).get('selectedCard');\n\nexport const getSelectedCard = (state: State) => getCard(state, getSelectedCardId(state));\n","import * as React from 'react';\n\nexport interface ItemListProps<T> {\n  items: T[];\n  itemRenderer: (item: T, index?: number) => JSX.Element;\n}\n\nexport class ItemList<T> extends React.Component<ItemListProps<T>, {}> {\n  render() {\n    const { items, itemRenderer } = this.props;\n\n    return <>{items.map(itemRenderer)}</>;\n  }\n}\n","import { Typography, styled } from '@material-ui/core';\n\nexport const TypoAppTitle = styled(Typography)({});\n\nexport const TypoCardTitle = styled(Typography)({});\n\nexport const TypoCardContent = styled(Typography)({});\n\nexport const TypoModalTitle = styled(Typography)({});\n\nexport const TypoModalContent = styled(Typography)({});\n","import * as React from 'react';\nimport { TypoAppTitle } from './Typographies';\nimport { FlexVContainer } from './FlexContainers';\n\nconst EmptyPage: React.FC<{\n  txt: string;\n}> = ({ txt }) => (\n  <FlexVContainer full={true} alignItems=\"center\" justifyContent=\"center\">\n    <TypoAppTitle align=\"center\" variant=\"h5\" gutterBottom={true}>\n      {txt}\n    </TypoAppTitle>\n  </FlexVContainer>\n);\n\nexport default EmptyPage;\n","import React from 'react';\nimport styledComponents from 'styled-components';\nimport { styled as styledMui } from '@material-ui/core/styles';\n\nimport MuiCard from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\n\nimport { Card, CardTypes } from '../cards-types';\nimport { FlexVContainer } from '../../../components/FlexContainers';\nimport { TypoCardContent } from '../../../components/Typographies';\n\nconst CardContainer = styledComponents.div`\n  width: 50%;\n  padding: 10px;\n  height: 200px;\n  box-sizing: border-box;\n\n  @media (min-width: 768px) {\n    width: 25%;\n  }\n`;\n\nconst CardListItemStyled = styledMui(MuiCard)({\n  display: 'flex',\n  flexDirection: 'column',\n  height: '100%',\n  boxSizing: 'border-box',\n});\n\nconst CardListItem: React.FC<{\n  card: Card;\n  isSelected: boolean;\n  onClickCard: (id: string) => any;\n}> = ({ card, isSelected, onClickCard }) => {\n  const cardColors =\n    card.__type === CardTypes.Rotten\n      ? { txt: card.text, backGroundColor: '#000000', textColor: '#FFFFFF' }\n      : { txt: card.text, backGroundColor: '#FFFFFF', textColor: '#000000' };\n  return (\n    <CardContainer>\n      <CardListItemStyled\n        onClick={() => onClickCard(card.uid)}\n        style={{\n          border: isSelected ? '2px solid brown' : 'none',\n          backgroundColor: cardColors.backGroundColor,\n          color: cardColors.textColor,\n        }}\n      >\n        <FlexVContainer>\n          <CardContent>\n            <TypoCardContent variant=\"subtitle1\">{cardColors.txt}</TypoCardContent>\n          </CardContent>\n        </FlexVContainer>\n      </CardListItemStyled>\n    </CardContainer>\n  );\n};\n\nexport default CardListItem;\n","import * as React from 'react';\nimport { Fab } from '@material-ui/core';\nimport { styled as styledMui } from '@material-ui/core/styles';\n\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\n\nexport enum Fabs {\n  ADD = 'ADD',\n  EDIT = 'EDIT',\n  DELETE = 'DELETE',\n}\n\ntype FabProps = {\n  onClick: (e: any) => any;\n};\n\nconst FabWithMargin = styledMui(Fab)({\n  marginRight: 10,\n});\n\nconst FabAdd: React.FC<FabProps> = ({ onClick }) => (\n  <FabWithMargin color=\"secondary\" aria-label=\"add\" onClick={onClick}>\n    <AddIcon />\n  </FabWithMargin>\n);\n\nconst FabEdit: React.FC<FabProps> = ({ onClick }) => (\n  <FabWithMargin color=\"secondary\" aria-label=\"edit\" onClick={onClick}>\n    <EditIcon />\n  </FabWithMargin>\n);\n\nconst FabDelete: React.FC<FabProps> = ({ onClick }) => (\n  <Fab color=\"secondary\" aria-label=\"delete\" onClick={onClick}>\n    <DeleteIcon />\n  </Fab>\n);\n\nexport type FabTypes = typeof FabAdd | typeof FabEdit | typeof FabDelete;\n\nexport { FabAdd, FabEdit, FabDelete };\n","import { State } from '../../../store/types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Dispatch } from 'redux';\n\nimport * as selectors from '../cards-selectors';\nimport * as actions from '../cards-actions';\n\nimport { ItemList } from '../../../components/ItemList';\nimport EmptyPage from '../../../components/EmptyPage';\nimport CardListItem from './CardListItem';\n\nconst mapStateToProps = (state: State) => ({\n  cards: selectors.getCards(state),\n  selectedCardId: selectors.getSelectedCardId(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onClickCard: (cardId: string) => dispatch(actions.selectCard(cardId)),\n});\n\ntype ListProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst CardList: React.FC<ListProps> = ({ cards, selectedCardId, onClickCard }) =>\n  cards.count() === 0 ? (\n    <EmptyPage txt={`There's no cards created yet`} />\n  ) : (\n    <ItemList\n      items={cards\n        .sortBy(f => f.dateAdded)\n        .reverse()\n        .toIndexedSeq()\n        .toArray()}\n      itemRenderer={(item, index) => (\n        <CardListItem\n          key={`card-list-item-${index}`}\n          onClickCard={onClickCard}\n          card={item}\n          isSelected={item.uid === selectedCardId}\n        />\n      )}\n    />\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardList);\n","import styledComponents from 'styled-components';\nimport styledTS from 'styled-components-ts';\nimport MuiModal from '@material-ui/core/Modal';\nimport { styled } from '@material-ui/styles';\n\nexport const Modal = styled(MuiModal)({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n});\n\nexport const ModalContainer = styledTS(styledComponents.div)({\n  backgroundColor: '#FFFF',\n  border: '2px solid #000',\n  padding: 10,\n});\n","import * as React from 'react';\nimport { CardTypes } from '../cards-types';\nimport { FormControl, FormLabel, RadioGroup, FormControlLabel, Radio } from '@material-ui/core';\n\nconst CardTypeSelector: React.FC<{\n  selectedValue: CardTypes;\n  handleChange: (e: React.ChangeEvent<HTMLInputElement>) => any;\n}> = ({ selectedValue, handleChange }) => (\n  <FormControl component=\"fieldset\">\n    <FormLabel component=\"legend\">Card Type</FormLabel>\n    <RadioGroup aria-label=\"card-type\" name=\"card-type-radio-grout\" value={selectedValue} onChange={handleChange}>\n      <FormControlLabel value={CardTypes.Fresh} control={<Radio color=\"primary\" />} label=\"Fresh\" />\n      <FormControlLabel value={CardTypes.Rotten} control={<Radio color=\"secondary\" />} label=\"Rotten\" />\n    </RadioGroup>\n  </FormControl>\n);\n\nexport default CardTypeSelector;\n","import React from 'react';\nimport uuid from 'uuid';\nimport { connect } from 'react-redux';\nimport { history } from '../../../router';\n\nimport { CardTypes, Card } from '../cards-types';\n\nimport { ModalContainer } from '../../../components/AppModal';\nimport { FlexVContainer, FlexHContainer, FlexGrow } from '../../../components/FlexContainers';\nimport { TextField, Button, Modal, Fade, Backdrop } from '@material-ui/core';\nimport { ModalProps } from '@material-ui/core/Modal';\nimport { TypoModalTitle } from '../../../components/Typographies';\n\nimport * as selectors from '../cards-selectors';\nimport * as actions from '../cards-actions';\n\nimport { styled } from '@material-ui/styles';\nimport CardTypeSelector from './CardTypeSelector';\nimport { State } from '../../../store/types';\nimport { Dispatch } from 'redux';\n\nexport const TextFieldContainer = styled(TextField)({\n  width: '100%',\n  height: 100,\n});\n\nconst mapStateToProps = (state: State) => ({\n  card: selectors.getCard(state, selectors.getSelectedCardId(state)),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onClickSave: (cardType: CardTypes, cardTxt: string) =>\n    dispatch(\n      actions.addCard({\n        uid: uuid.v1(),\n        __type: cardType,\n        text: cardTxt,\n        dateAdded: new Date(),\n        dateModified: new Date(),\n      } as Card),\n    ),\n  onClickEdit: (card: Card) => dispatch(actions.updateCard(card)),\n  onClickClose: () => history.goBack(),\n});\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps> & ModalProps;\n\nconst CardModal: React.FC<Props> = props => {\n  const { card, onClickSave, onClickClose, onClickEdit, ...rest } = props;\n\n  const [selectedCardType, setCardType] = React.useState(card ? card.__type : CardTypes.Fresh);\n\n  const [cardText, setCardsText] = React.useState(\n    card ? (card.__type === CardTypes.Rotten ? card.text : card.text) : '',\n  );\n\n  const handleChangeCardType = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCardType(e.target.value === CardTypes.Fresh ? CardTypes.Fresh : CardTypes.Rotten);\n  };\n\n  const handleChangeCardTxt = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setCardsText(e.target.value);\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      {...rest}\n      open={true}\n      BackdropComponent={Backdrop}\n      BackdropProps={{ timeout: 500 }}\n      onBackdropClick={onClickClose}\n    >\n      <Fade in={true}>\n        <ModalContainer>\n          <FlexHContainer width={'100%'}>\n            <TypoModalTitle>{card ? 'Edit Card' : 'Create Card'}</TypoModalTitle>\n          </FlexHContainer>\n          <FlexVContainer>\n            <CardTypeSelector selectedValue={selectedCardType} handleChange={handleChangeCardType} />\n            <TextFieldContainer\n              id=\"cards-text-textfield\"\n              label=\"Text\"\n              value={cardText}\n              onChange={handleChangeCardTxt}\n              multiline\n              inputProps={{ style: { color: '#000' } }}\n              rowsMax=\"4\"\n            />\n          </FlexVContainer>\n          <FlexHContainer alignItems={'flex-end'}>\n            <FlexGrow />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={() => {\n                if (card) {\n                  card.__type = selectedCardType;\n                  card.text = cardText;\n                  onClickEdit(card);\n                } else {\n                  onClickSave(selectedCardType, cardText);\n                }\n              }}\n            >\n              Save\n            </Button>\n            <Button variant=\"contained\" onClick={onClickClose}>\n              Close\n            </Button>\n          </FlexHContainer>\n        </ModalContainer>\n      </Fade>\n    </Modal>\n  );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CardModal);\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport styledComponents from 'styled-components';\nimport { styled as styledMui } from '@material-ui/core/styles';\nimport { AppBar as MuiAppBar, Toolbar } from '@material-ui/core';\n\nimport { State } from '../store/types';\n\nimport { FlexGrow } from './FlexContainers';\nimport * as cardsActions from '../features/cards/cards-actions';\nimport { getSelectedCardId } from '../features/cards/cards-selectors';\nimport { push } from 'connected-react-router/immutable';\nimport { FabAdd, FabDelete, FabEdit } from './AppFabs';\n\nconst StyledActionBar = styledMui(MuiAppBar)({\n  position: 'relative',\n  display: 'flex',\n  alignSelf: 'flex-end',\n});\n\nconst ActionButtonsContainer = styledComponents.div({\n  position: 'absolute',\n  zIndex: 1,\n  top: -30,\n  left: 0,\n  right: 0,\n  margin: '0 auto',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n});\n\nconst mapStateToProps = (state: State) => ({\n  selectedCardId: getSelectedCardId(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n  onClickAdd: () => dispatch(push('/cards/create')),\n  onClickDelete: (cardId: string) => dispatch(cardsActions.deleteCard(cardId)),\n  onClickEdit: () => dispatch(push('/cards/edit')),\n});\n\ntype ActionBarProps = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst ActionBar: React.FC<ActionBarProps> = ({ selectedCardId, onClickAdd, onClickDelete, onClickEdit }) => (\n  <StyledActionBar>\n    <Toolbar>\n      <ActionButtonsContainer>\n        {selectedCardId !== '' ? (\n          [\n            <FabEdit key=\"fab-edit\" onClick={onClickEdit} />,\n            <FabDelete key=\"fab-delete\" onClick={() => onClickDelete(selectedCardId)} />,\n          ]\n        ) : (\n          <FabAdd onClick={onClickAdd} />\n        )}\n      </ActionButtonsContainer>\n      <FlexGrow />\n    </Toolbar>\n  </StyledActionBar>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActionBar);\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { AppTab } from '../features/app/app-types';\n\ntype AppTabsProps = {\n  onChangeTab: (tab: AppTab) => any;\n  currentTab: AppTab;\n};\n\nconst AppTabs: React.FC<AppTabsProps> = ({ currentTab, onChangeTab }) => (\n  <AppBar position=\"static\" color=\"default\">\n    <Tabs\n      value={currentTab.valueOf()}\n      onChange={(e, v) => {\n        onChangeTab(v);\n      }}\n      indicatorColor=\"primary\"\n      textColor=\"primary\"\n      variant=\"fullWidth\"\n      aria-label=\"app-tabs\"\n    >\n      <Tab label=\"Cards\" id=\"tab-cards\" />\n      <Tab label=\"Decks\" id=\"tab-decks\" disabled={true} />\n    </Tabs>\n  </AppBar>\n);\n\nexport default AppTabs;\n","import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { AppBar as MuiAppBar, styled } from '@material-ui/core';\n\nimport { State, RootAction } from '../store/types';\nimport { AppTab } from '../features/app/app-types';\n\nimport * as appActions from '../features/app/app-actions';\nimport * as appSelectors from '../features/app/app-selectors';\n\nimport AppTabs from './AppTabs';\nimport { TypoAppTitle } from './Typographies';\n\nconst AppBarStyled = styled(MuiAppBar)({\n  position: 'relative',\n  paddingTop: 10,\n});\n\nconst mapStateToProps = (state: State) => ({\n  currentTab: appSelectors.getCurrentTab(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch<RootAction>) => ({\n  onChangeTab: (tab: AppTab) => dispatch(appActions.changeCurrentTab(tab)),\n});\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nconst AppBar: React.FC<Props> = ({ currentTab, onChangeTab }) => (\n  <AppBarStyled>\n    <TypoAppTitle align=\"center\" variant=\"h5\" gutterBottom={true}>\n      CARDS AGAINST FLORA\n    </TypoAppTitle>\n    <AppTabs currentTab={currentTab} onChangeTab={onChangeTab} />\n  </AppBarStyled>\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppBar);\n","import React from 'react';\n\nimport ActionBar from '../components/ActionBar';\nimport AppBar from '../components/AppBar';\nimport { FlexVContainer } from '../components/FlexContainers';\n\nconst Main: React.FC = ({ children }) => (\n  <FlexVContainer full={true}>\n    <FlexVContainer>\n      <AppBar />\n    </FlexVContainer>\n    <FlexVContainer full={true}>{children}</FlexVContainer>\n    <FlexVContainer>\n      <ActionBar />\n    </FlexVContainer>\n  </FlexVContainer>\n);\n\nexport default Main;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { RouteComponentProps, Route, Switch } from 'react-router';\n\nimport { State } from '../store/types';\nimport * as cardsSelectors from '../features/cards/cards-selectors';\n\nimport CardList from '../features/cards/components/CardList';\nimport CardModal from '../features/cards/components/CardModal';\nimport LoadingFlower from '../components/LoadingFlower';\nimport Main from '../layouts/Main';\nimport { FlexHContainer } from '../components/FlexContainers';\n// import FormModal from '../../components/FormModal';\n\nconst mapStateToProps = (state: State) => ({\n  isFetchingCards: cardsSelectors.getIsFetchingCards(state),\n});\n\ntype Props = ReturnType<typeof mapStateToProps> & RouteComponentProps;\n\nconst CardsPage: React.FC<Props> = ({ isFetchingCards, match }) => (\n  <Main>\n    {isFetchingCards ? (\n      <LoadingFlower />\n    ) : (\n      <FlexHContainer full={true} overflow={'auto'} flexWrap={'wrap'}>\n        <CardList />\n        <Switch>\n          <Route path={`${match.url}/create`} component={CardModal} />\n          <Route path={`${match.url}/edit`} component={CardModal} />\n        </Switch>\n      </FlexHContainer>\n    )}\n  </Main>\n);\n\nexport default connect(mapStateToProps)(CardsPage);\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router/immutable';\nimport { Switch, Route } from 'react-router';\n\nimport { getPath } from './router-paths';\nimport configureStore from '../store';\nimport { createBrowserHistory } from 'history';\n\nimport App from '../pages/App';\nimport Cards from '../pages/Cards';\n\nexport const history = createBrowserHistory();\nexport const store = configureStore(history);\n\nclass AppRouter extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <Switch>\n            <Route exact path={getPath('home')} component={App} />\n            <Route path={getPath('cards')} component={Cards} />\n          </Switch>\n        </ConnectedRouter>\n      </Provider>\n    );\n  }\n}\n\nexport default AppRouter;\n","import { applyMiddleware, createStore } from 'redux';\nimport { History } from 'history';\n\nimport { routerMiddleware } from 'connected-react-router/immutable';\nimport { createLogger } from 'redux-logger';\nimport createSagaMiddleWare from 'redux-saga';\n\nimport { composeEnhancers } from './utils';\nimport rootSaga from './root-saga';\nimport rootReducer from './root-reducer';\n\nexport default function configureStore(history: History) {\n  //Init middlewares\n  const loggerMiddleWare = createLogger({ collapsed: true });\n  const sagaMiddleware = createSagaMiddleWare();\n  const middlewares = [routerMiddleware(history), loggerMiddleWare, sagaMiddleware];\n\n  //Init enhancer\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\n\n  //Store creation\n  const store = createStore(rootReducer(history), enhancer);\n\n  //Run sagas\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { MuiThemeProvider } from '@material-ui/core';\nimport theme from './mui-theme';\nimport './index.css';\n\nimport AppRouter from './router';\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <AppRouter />\n  </MuiThemeProvider>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}